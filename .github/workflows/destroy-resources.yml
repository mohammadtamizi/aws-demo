name: Destroy AWS Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy (dev or prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      confirmation:
        description: 'Type "DESTROY" to confirm deletion of resources'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  TF_STATE_BUCKET_DEV: aws-demo-terraform-state-dev
  TF_STATE_BUCKET_PROD: aws-demo-terraform-state-prod

jobs:
  validate:
    name: Validate Inputs
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        if: ${{ github.event.inputs.confirmation != 'DESTROY' }}
        run: |
          echo "Error: Confirmation text must be exactly 'DESTROY'"
          exit 1

  destroy:
    name: Destroy Resources
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.4.0

      - name: Set variables based on environment
        id: set-vars
        run: |
          if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
            echo "state_bucket=$TF_STATE_BUCKET_DEV" >> $GITHUB_OUTPUT
            echo "app_name=aws-demo-dev" >> $GITHUB_OUTPUT
          else
            echo "state_bucket=$TF_STATE_BUCKET_PROD" >> $GITHUB_OUTPUT
            echo "app_name=aws-demo" >> $GITHUB_OUTPUT
          fi
          
      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ steps.set-vars.outputs.state_bucket }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=$AWS_REGION"

      - name: Terraform Destroy
        id: destroy
        run: |
          cd terraform
          
          # Set a default container image
          CONTAINER_IMAGE="amazon/amazon-ecs-sample:latest"
          
          # Run terraform destroy
          terraform destroy -auto-approve \
            -var="aws_region=$AWS_REGION" \
            -var="app_image=$CONTAINER_IMAGE" \
            -var="app_name=${{ steps.set-vars.outputs.app_name }}" \
            -var="environment=${{ github.event.inputs.environment }}"

      - name: Verify ECS Cluster Destroyed
        run: |
          if aws ecs describe-clusters --clusters "${{ steps.set-vars.outputs.app_name }}-cluster" --query 'clusters[0].status' --output text 2>/dev/null; then
            echo "::warning::ECS cluster still exists. Some resources may not have been properly destroyed."
          else
            echo "::notice::ECS cluster successfully destroyed."
          fi

      - name: Verify ECR Repository Destroyed
        run: |
          if aws ecr describe-repositories --repository-names "${{ steps.set-vars.outputs.app_name }}-repo" --query 'repositories[0].repositoryName' --output text 2>/dev/null; then
            echo "::warning::ECR repository still exists. You may want to delete it manually."
          else
            echo "::notice::ECR repository successfully destroyed."
          fi 