name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: aws-demo-repo
  ECS_CLUSTER: aws-demo-cluster
  ECS_SERVICE: aws-demo-service
  TF_STATE_BUCKET_DEV: aws-demo-terraform-state-dev
  TF_STATE_BUCKET_PROD: aws-demo-terraform-state-prod
  # Placeholder ARNs for SSM Parameters - replace with actual ARNs or parameterize
  CONVEX_URL_PARAMETER_ARN: "arn:aws:ssm:us-east-1:123456789012:parameter/convex-url"
  CLERK_PUBLISHABLE_KEY_PARAMETER_ARN: "arn:aws:ssm:us-east-1:123456789012:parameter/clerk-publishable-key"
  CLERK_SECRET_KEY_PARAMETER_ARN: "arn:aws:ssm:us-east-1:123456789012:parameter/clerk-secret-key"

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd aws-demo
          npm ci

      - name: Run linting
        run: |
          cd aws-demo
          npm run lint

      - name: Run security audit
        run: |
          cd aws-demo
          npm audit --production

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2.3.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Docker Image
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    # Build on both main and dev branches
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check if image already exists in ECR
        id: check-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # First check if the repository exists
          if aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION > /dev/null 2>&1; then
            # If repository exists, check if the image exists
            if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG --region $AWS_REGION > /dev/null 2>&1; then
              echo "Image already exists, skipping build and push"
              echo "image_exists=true" >> $GITHUB_OUTPUT
              echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
            else
              echo "Image does not exist, will build and push"
              echo "image_exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Repository does not exist yet, will create it during build"
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        if: steps.check-image.outputs.image_exists != 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          BRANCH_TAG: ${{ github.ref_name }}
        run: |
          # Build a docker container and push it to ECR with branch tag
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH_TAG-latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set image output when skipping build
        id: set-image-output
        if: steps.check-image.outputs.image_exists == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Using existing image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        # Note: Since this is a demo project, we're making the security scan non-blocking

  deploy-dev:
    name: Deploy to Development
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.4.0

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET_DEV" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=$AWS_REGION"

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          pwd
          # Use an absolute path for the tfplan file
          terraform plan \
            -var="aws_region=$AWS_REGION" \
            -var="app_image=${{ steps.build-image.outputs.image || steps.set-image-output.outputs.image }}" \
            -var="app_name=aws-demo-dev" \
            -var="environment=dev" \
            -var="convex_url_parameter_arn=$CONVEX_URL_PARAMETER_ARN" \
            -var="clerk_publishable_key_parameter_arn=$CLERK_PUBLISHABLE_KEY_PARAMETER_ARN" \
            -var="clerk_secret_key_parameter_arn=$CLERK_SECRET_KEY_PARAMETER_ARN" \
            -input=false \
            -out=/tmp/tfplan_dev
          # Debug - confirm plan file was created
          ls -la /tmp/tfplan_dev

      - name: Terraform Apply
        id: apply
        run: |
          cd terraform
          pwd
          # Debug - check if plan file exists
          ls -la /tmp/tfplan_dev
          terraform apply -auto-approve -input=false /tmp/tfplan_dev

      - name: Get Application URL
        run: |
          cd terraform
          echo "::notice::Development Application URL: $(terraform output -raw alb_dns_name)"

  deploy-prod:
    name: Deploy to Production
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.4.0

      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET_PROD" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=$AWS_REGION"

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          pwd
          # Use an absolute path for the tfplan file
          terraform plan \
            -var="aws_region=$AWS_REGION" \
            -var="app_image=${{ steps.build-image.outputs.image || steps.set-image-output.outputs.image }}" \
            -var="app_name=aws-demo" \
            -var="environment=prod" \
            -var="convex_url_parameter_arn=$CONVEX_URL_PARAMETER_ARN" \
            -var="clerk_publishable_key_parameter_arn=$CLERK_PUBLISHABLE_KEY_PARAMETER_ARN" \
            -var="clerk_secret_key_parameter_arn=$CLERK_SECRET_KEY_PARAMETER_ARN" \
            -input=false \
            -out=/tmp/tfplan_prod
          # Debug - confirm plan file was created
          ls -la /tmp/tfplan_prod

      - name: Request approval for Terraform Apply
        uses: trstringer/manual-approval@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: mohammadtmz
          minimum-approvals: 1
          issue-title: "Production Deployment Approval"
          issue-body: "Please approve or deny the production deployment"
          exclude-workflow-initiator-as-approver: false

      - name: Terraform Apply
        id: apply
        run: |
          cd terraform
          pwd
          # Debug - check if plan file exists
          ls -la /tmp/tfplan_prod
          terraform apply -auto-approve -input=false /tmp/tfplan_prod

      - name: Get Application URL
        run: |
          cd terraform
          echo "::notice::Production Application URL: $(terraform output -raw alb_dns_name)"
